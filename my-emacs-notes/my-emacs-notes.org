* My Emacs notes

  Tips related to configuration and other things related to Emacs that I find useful.

*** How to view the list of all the currently installed packages in Emacs?

If you are using Emacs in one machine,
and if you want to set-up the exact same set-up settings in another machine,
you need to view the list of installed packages from the package manager.

To see a list of the available packages : Meta x list-packages

Run this command till you find the first row of installed package: "Ctrl s installed"

Start selecting with Ctrl SPC.

Go down till you reach built-in packages. Copy with Meta w. Ctrl x b for new buffer. Paste with Ctrl y.Ctrl x Ctrl s to save file.

Another alternative is, simply copy the ~.emacs~ file from this computer to the other computer.

------------

*** How to add MELPA as another source of packages in addition to GNU's elpa?
    
    1. Hint: In order to avoid having to do this multiple times when switching between multiple machines,
       save the init files in GitHub so that you can just move them from machine to machine.
    2. The alternative is:
       In a browser, visit MELPA website.
       Grab the URL for the package archive "https://melpa.org/packages/"
       Meta x customize-group -> package -> Go to "package archives" -> "INS" to insert a new entry.
       Provide archive name and archive URL. Set the "State" to "Save for future sessions".

After making changes to the config to add MELPA as a source of packages, run the following two commands:

  1. ~Meta x~ package-refresh-contents (to refresh the list of packages)
  2. ~Meta x~ ~package-install~ RET (to launch package install mode)
  3. Type the name of the package you are looking for and when you find the package -> RET 

To change to mode from some other mode : Meta x evil-mode

------------

*** How can I reload .emacs after changing it?

    You can use the command load-file (Meta x load-file, then press return twice to accept the default filename, which is the current file being edited).

    You can also just move the point to the end of any sexp and press Ctrl xCtrl e to execute just that sexp.
    Usually it's not necessary to reload the whole file if you're just changing a line or two.

    https://stackoverflow.com/a/2580726

-------------

*** Functions
    
    To view the list of all available functions,
    Meta x tab.

    You can further narrow down the list by typing the first characters of the names of the functions.

-------------
    
*** Navigation commands

    Navigation:

    1. Go to the beginning of the file Meta < (M Shift ,)
    1. Go to the end of the file Meta > (M Shift .)
    1. How to go the first non-whitespace character in a line (The equivalent of ^ in Vim)? Alt + A
    1. How to go the last non-whitespace character in a line (The equivalent of ^ in Vim)? ???

    Move by screenfuls:

    | Command | Description                                                                                               |
    |---------+-----------------------------------------------------------------------------------------------------------|
    | Ctrl v  | Move forward one screenful                                                                                |
    | Meta v  | Move backward one screenful                                                                               |
    | Ctrl l  | Moving the text around the cursor to the center of the screen, top of the screen and bottom of the screen |

    Move by lines: (P for previous, N for next, B for backward and F for forward)

			  Previous line, Ctrl p
				  :
				  :
   Backward, Ctrl b .... Current cursor position .... Forward, Ctrl f
				  :
				  :
			    Next line, Ctrl n

   If moving by characters is too slow, you can move by words.  Meta f (META-f) moves forward a word and Meta b moves back a word.

   When you are in the middle of a word, Meta f moves to the end of the word.
   When you are in whitespace between words, Meta f moves to the end of the following word.
   Meta b works likewise in the opposite direction.

   
   This parallel applies between lines and sentences:
   Ctrl a and Ctrl e move to the beginning or end of a line, and
   Meta a and Meta e move to the beginning or end of a sentence.

    | Command | Description                        |
    |---------+------------------------------------|
    | Ctrl f  | Move forward a character           |
    | Ctrl b  | Move backward a character          |
    | Meta f  | Move forward a word                |
    | Meta b  | Move backward a word               |
    | Ctrl n  | Move to next line                  |
    | Ctrl p  | Move to previous line              |
    | Ctrl a  | Move to beginning of line          |
    | Ctrl e  | Move to end of line                |
    | Meta a  | Move back to beginning of sentence |
    | Meta e  | Move forward to end of sentence    |

    Two other important cursor motion commands are Meta < (META Less-than),
    which moves to the beginning of the whole text, and Meta > (META
    Greater-than), which moves to the end of the whole text.

    On most terminals, the "<" is above the comma, so you must use the
    shift key to type it.  On these terminals you must use the shift key
    to type Meta < also; without the shift key, you would be typing Meta comma.

    Ctrl x 1	One window (i.e., kill all other windows).

-------------------

*** Text manipulation commands

    Here is a summary of the delete operations:

	<DEL>        Delete the character just before the cursor
	Ctrl d   	     Delete the next character after the cursor

	Meta <DEL>      Kill the word immediately before the cursor
	Meta d	     Kill the next word after the cursor

	Ctrl k	     Kill from the cursor position to end of line
	Meta k	     Kill to the end of the current sentense (the next full stop)

	
    The command for yanking (pasting) is Ctrl y.  It reinserts the last killed text, at the current cursor position.

    What do you do if you have some text you want to yank back, and then you kill something else?
    Ctrl y would yank the more recent kill.
    But the previous text is not lost.
    You can get back to it using the Meta y command.
    After you have done ~~Ctrl y~~ to get the most recent kill, typing ~~Meta y~~ replaces that yanked text with the previous kill.
    Typing Meta y again and again brings in earlier and earlier kills.
    When you have reached the text you are looking for, you do not have to do anything to keep it.
    Just go on with your editing, leaving the yanked text where it is.

    If you ~~Meta y~~ enough times, you come back to the starting point (the most recent kill).

**** Replace functions

    There are multiple ways to do this.

    1. There are built in functions for replacing text.

       Meta x replace-string
       Meta x replace-regexp
       Meta x replace-rectangle
   
       Using these, it is easy to perform replace operations.
   
       Example:
       How to insert something at the beginning of every line?
       Meta x replace-regexp - ^ - String that you want to put at the beginning of each line.
   
       How to delete something at the beginning of every line?
       Meta x replace-regexp - String that you want to delete at the beginning of each line - (replace with nothing) - RET.
       
    2. Use multiple markers package.

       Mark the lines that you want to change and use the functions
       mc/edit-beginning-of-lines
       mc/edit-end-of-lines
       mc/edit-lines

       Using this, we can also do things like deleting/changing a common word/text in multiple lines in the file.
    
------------

*** File navigation commands

    | Command                    | Description                                                                          |   |   |   |
    |----------------------------+--------------------------------------------------------------------------------------+---+---+---|
    | Ctrl x b and Ctrl x Ctrl b | Switching between buffers                                                            |   |   |   |
    | Ctrl g                     | Cancelling half-entered commands                                                     |   |   |   |
    | Ctrl x Ctrl c              | Quitting Emacs                                                                       |   |   |   |
    | Ctrl x k                   | kill buffer                                                                          |   |   |   |
    | Meta x                     | Invoking commands by name                                                            |   |   |   |
    | Meta x customize           | to enter customization menu                                                          |   |   |   |
    | Ctrl x b * untitled *      | (remove the spaces before and after the asterisks) will open new buffer if not exist |   |   |   |
    | Ctrl x Ctrl s              | Saving files                                                                         |   |   |   |

-------------
    
*** help with emacs

    | Ctrl h m, Ctrl h k, Ctrl h f, Ctrl h a | Getting help on editing modes, keybindings and commands. (just remember Ctrl h and read the prompt in the minibuffer)                                                      |

    Ctrl h Ctrl a - For information about GNU Emacs and the GNU system.
    
    Ctrl h m - To view documentation on your current major mode.
    
    Ctrl h - To launch help mode on the fly.
    
    To use the Help features, type the Ctrl h character, and then a character saying what kind of help you want.

    If you are REALLY lost, type Ctrl h ? and Emacs will tell you what kinds of help it can give.

    The most basic HELP feature is Ctrl h c.

    To get more information about a command, use Ctrl h k instead of Ctrl h c.

    >> Type Ctrl h k Ctrl p.

    Ctrl h a	Command Apropos.  Type in a keyword and Emacs will list
		all the commands whose names contain that keyword.
		These commands can all be invoked with META-x.
		For some commands, Command Apropos will also list a
		sequence of one or more characters which runs the same
		command.

    >> Type Ctrl h a file <Return>.

    This displays in another window a list of all Meta x commands with "file"
    in their names.  You will see character-commands listed beside the
    corresponding command names (such as Ctrl x Ctrl f beside find-file).

    Ctrl h i	Read included Manuals (a.k.a. Info).  This command puts
		you into a special buffer called "*info*" where you
		can read manuals for the packages installed on your system.
		Type m emacs <Return> to read the Emacs manual.
		If you have never before used Info, type h and Emacs
		will take you on a guided tour of Info mode facilities.
		Once you are through with the tutorial, you should
		consult the Emacs Info manual as your primary documentation.

   Ctrl h f - Describe a function.  You type in the name of the function.

   Ctrl h k - To get more information about a command, use Ctrl h k instead of Ctrl h c.

------------

*** Init file

    https://www.emacswiki.org/emacs/InitFile

    Your init file contains personal EmacsLisp code that you want to execute when you start Emacs.

    For GnuEmacs, your init file is ~/.emacs, ~/.emacs.el, or ~/.emacs.d/init.el.

    If anything goes wrong with the customizations, delete the ".emacs" file in the home directory and start from scratch or the backed up version of the file again.

    Where can I find my .emacs file for Emacs running on Windows?
    If you want to look at the contents of the file within Emacs, ~ at the beginning of a file name is expanded to your HOME directory, so you can always find your .emacs file with Ctrl x Ctrl f ~/.emacs.

    If you are trying to find out where the file is as opposed to looking at the contents of the file:
    It should be stored in the variable ~user-init-file~.
    Use ~Meta x describe-variable RET user-init-file RET~ or  ~Ctrl H v user-init-file~ RET to check. You can also open it directly by using Meta x eval-expression RET (find-file user-init-file) RET

------------

*** How to auto save an org document in markdown format?

    To do it automatically,
    install the package ~auto-org-md~ and use ~Meta x auto-org-md-mode~ to toggle the auto save to markdown functionality on and off.
    
    If you turn it on,
    after editing a file in org-mode, when you save it, a markdown version of the file is saved automatically in the same folder that the org file is in.

    Is there a way to do this without using the 'auto-org-md' package?
    This may not be necessary at all. The org files are showing up very nicely in github. So there is no need to export them as markdown files at all.

------------

*** Line numbers

    #+NAME: <set relative line numbers in emacs>
    #+BEGIN_SRC
    (global-display-line-numbers-mode)
    (setq display-line-numbers-type 'relative)
    #+END_SRC

------------

*** Exporting

You might want to print your notes, publish them on the web, or share them with people not using Org.
Org can convert and export documents to a variety of other formats while retaining as much structure (see Document Structure) and markup (see Markup for Rich Contents) as possible.  

Use ~Ctrl c Ctrl e~ to launch the export command and then use the options displayed to make selections.
e.g. to export as a UTF-8 plain text file, select 't' and 'u'

------------

*** Search in current buffer
    
emacs isearch (incremental). Ctrl+s

While in isearch:

| Ctrl+s       | Jump to next occurrence                     |
| Ctrl+r       | Jump to previous occurrence.                |
| Ctrl+g/Enter | Exit and place cursor at original position. |

How to do case insensitive search?

------------

*** Dired tips

(Alphabetical order)

    | Ctrl x Ctrl f | Visiting (opening) files. (This puts us in Emac's dired mode - directory editor). To create a new file, just start typing the name of the file that you want to create. |
    | g             | Refresh the listing in dired mode                                                                                                                                       |

    
    | d | Flag this file for deletion (dired-flag-file-deletion).      |
    | R | rename a file                                                |
    | u | Remove the deletion flag (dired-unmark).                     |
    | x | Delete files flagged for deletion (dired-do-flagged-delete). |

------------

*** Terminal

    https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html

    To launch terminal within emacs, ~Meta x shell~.
    To kill it, ~Ctrl-x k~.

-------------
    
*** Find the answers for the following:

   1. How to rewrite the configuration file in org mode?
   1. Sort a bunch of lines alphabetically.
   1. Join the next line with the current one
   1. Using  marks in a file/directory
   1. Completion. Either complete words from dictionary or context aware completion.
      Completing words based on words used in the current buffer or project.
      Language aware completion.
   1. Count the number of occurrences of a word or pattern in the current file.
   1. File comparison with emacs
   1. Indentation
   1. How to move an entire paragraph (or block of code) up? (like alt up arrow  or down arrow in visual studio code)
   1. How to move an entire line up? (like alt up arrow  or down arrow in visual studio code)
   1. Macros
   1. Repeat command (the equivalent of . - the dot command in Vim)
   1. How to search in an entire directory for a word and replace it?
   1. How to display all the occurances of a word in a buffer(like the way it is done in Notepad++)
   1. How to search in an entire directory for a specific file?
      Many people seem to be suggesting the package "Projectile". Take a look at it.
   1. How to remapping capslock key to  Ctrl
   1. Go through all the bindings for Vim and find their equivalents for emacs
   1. How to get a Tree view of directories as opposed to using dired for navigating project directories?
   1. How to go to the pairing paranthesis?
      https://stackoverflow.com/questions/9845661/with-emacs-how-to-go-to-the-pairing-balancing-parentheses
   1. A simple way to duplicate lines (one or more than one times) in emacs
      https://stackoverflow.com/questions/88399/how-do-i-duplicate-a-whole-line-in-emacs
      https://www.emacswiki.org/emacs/CopyingWholeLines#:~:text=Standard%20Emacs,-There%20are%20various&text=You%20can%20also%20use%20either,Meta%20key%20while%20you%20click.&text='C%2Da%20C%2DSPC%20C%2De%20M%2Dw,current%20line%2C%20including%20the%20newline.
   1. How to read internet articles in plain text mode in emacs?
      This is a workflow that I find useful.
      Copy the link for the article. Open it in Tor-browser/Firefox reader mode. Copy the contents and paste them into a buffer in emacs and read it there.

------------

*** Case conversion commmands

    https://www.gnu.org/software/emacs/manual/html_node/emacs/Case.html
    
   Convert a word from smaller case to upper case, upper case to smaller case or invert the case of each of the letters in the word.

-----------

*** The point

    In Emacs, the current position of the cursor is called point.
    The expression (point) returns a number that tells you where the cursor is located as a count of the number of characters from the beginning of the buffer up to point.

    Evaluate (Ctrl x Ctrl e) the following function:
    ~(point)~

------------
    
*** Evaluating expressions in emacs

    https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Eval.html

    There are many ways to evaluate expressions in emacs.

    1) Type the function in the current buffer and evaluate (Ctrl x Ctrl e) it.
       e.g.
       ~(point)~
       ~(buffer-name)~
       ~(buffer-file-name)~
   
    2) By using Meta x eval-expression RET (buffer-name) RET

       https://www.gnu.org/software/emacs/manual/html_node/eintr/Practicing-Evaluation.html
       
------------

*** Spelling

    https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html

-------------

*** Region

    https://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html

-------------

*** Undo

    1. ~Ctrl /~
    1. ~Ctrl _~
    1. ~Ctrl x u~

--------------    

*** Lists

       How to change the style of bullets?
       e.g. Change a star bullet list into number bullet list. Or vice versa.

       https://orgmode.org/manual/Plain-Lists.html

----------------

*** Joining lines in emacs

       How to join lines into one in emacs?

       1. ~~Meta ^~~

	  Either visually select and call Meta ^ to join the visually selected lines.
	  Or place the point anywhere on the last line of the group of lines that need joining and call Meta ^ repeatedly until all the lines are merged.
          It leaves one space between all of the now joined lines.

       2. ~~Meta join-line~~ : This will join two lines. Bind it to a convenient keystroke.

       3. Select paragraph/lines by ~~Meta h~~ or ~~Ctrl SPC~~. Press ~~Meta q~~

       4. Multiple Cursors combined with ~~Meta ^~~ will collapse all selected lines into one with all extraneous white-space removed.

          For example to select an entire buffer, invoke multiple cursors mode, collapse into one line, and then disable multiple cursors mode:

          #+BEGIN_SRC
          C-x h
          M-x mc/edit-lines
          M-^
          C-g
          #+END_SRC

----------------

*** Plugins

**** Avy

    https://github.com/abo-abo/avy

------------
    
**** Magit tips

    (When this gets reasonably big, pull this section into a separate file of its own.)
    To launch magit when you are editing a file that is in a git repository, ~Ctrl c g~

    To see the diff version of a file in the magit status page, with the mouse on that file, hit ~tab~. To close the diff view, hit tab again.

    After staging all the files we want to commit, to commit them, hit ~Ctrl c Ctrl c~
    Enter a commit message and hit ~Ctrl c Ctrl c~

    After you have a commit, to push it to the remote repository, hit ~P~. It gives you options about where to push it and some other details.

------------

**** Multiple cursors

    Install multiple-cursors and (the dependent package cl-lib) first.
    If you want to start multiple cursors at a word (or a tag or anything) that exists on multiple lines (the lines do not have to be continuous),
    mark the word (using Ctrl space) and then do Ctrl Shift . (dot).
    This will start multiple cursors on the multiple lines.
    After that, you can do normal operations like delete, insert, cut, copy, etc.
    There are a lot of features that can be done using this.
    This needs a lot more research.
    But this should be a good starting point to insert/delete text on multiple lines based on certain common words in multiple lines.0

    https://github.com/magnars/multiple-cursors.el

------------
