*** Vim fugitive

https://github.com/tpope/vim-fugitive/blob/master/doc/fugitive.txt

**** To launch the git status window

| :G       | git status |
| :Gstatus | git status |

When not in the git status window:

| :Gcommit | to open the commit window if you are not already in the git status window |
| :Gdiff   | diff mode to see the changes for the curent file                          |

In the Gstatus window:

| :Gpush  | git push                                                                                                                                                                                                 |
| (minus) | stage if the file is not staged. unstage if the file is already staged. This also works in visual mode. If you want to stage/unstage more than one file at a time, visually select them and press minus. |
| Ctrl n  | next file                                                                                                                                                                                                |
| Ctrl p  | previous file                                                                                                                                                                                            |
| p       | interactive staging. run `git add –patch` for current file                                                                                                                                               |
| Enter   | open a file for quick review. This opens that specific file in a split below. After opening the file, to see the diff view for that specific file, run :Gdiff                                            |
| C       | commit window                                                                                                                                                                                            |

**** Working with the git index

The git index is where you put changes that you want to be included in the next commit.
If you are used to working with the command line git client, you might think of the index as an abstract concept.
But with fugitive, you can actually read the index version of a file into a buffer by running::Gedit :path/to/file

If you run :Gedit with no arguments from a working tree file, it will open the index version of that file.
You can always open the index version of the current file by running any one of the following::Gedit

#+BEGIN_EXAMPLE
:Gedit :0
:Gedit :%
#+END_EXAMPLE

It helps to understand the lifecycle of the index file between two commits.
To begin with, the contents of the index and working copy files will be exactly the same as the most recent commit.
As you make changes to your working copy, its contents begin to diverge from those of the index file.
Staging a file updates the contents of the index file to match those of the working copy.
When you commit your work, it is the contents of the index file that are saved with that commit object.

***** Comparing working copy with index version using :Gdiff

When you run::Gdiff on a work tree file without any arguments, fugitive performs a vimdiff against the index version of the file. This opens a vertical split window, with the index file on the left and the working copy on the right. The files always appear in that order, so you can commit that to memory.Wholesale reconciliationThe :Gread and :Gwrite commands can either add a file to the index or reset the file, depending on where they are called from. The following table and diagrams summarize the possibilities:

| command | active window | affect        |
| :Gwrite | working copy  | stage file    |
| :Gread  | working copy  | checkout file |
| :Gwrite | index         | checkout file |
| :Gread  | index         | stage file    |

***** Piecemeal reconciliation

Vim’s built in :diffget and :diffput commands work a bit like :Gread and :Gwrite, except that they are more granular.
Whereas :Gread will completely overwrite the current buffer with the contents of the other buffer, :diffget will only pull in a patch at a time.

| command  | active window | affect        |
| :diffput | working copy  | stage hunk    |
| :diffget | working copy  | checkout hunk |
| :diffput | index         | checkout hunk |
| :diffget | index         | stage hunk    |

After making changes to the index file (using :diffget and/or :diffput), the status bar at the bottom will show a (+) plus sign indicating unsaved changes to the index file. Run :w on the index file to save the changes and stage the file. If the index file is not the active buffer, run :wa to save all the open buffers. This will make sure that the changes to the index file are saved and staged. If not, the changes to the index file may not be persisted and we would have to start all over again.

**** Resolving merge conflicts with vimdiff

:Gdiff on a conflicted file opens 3-way diffWhen you run :Gdiff on a conflicted file, fugitive opens 3 split windows. They always appear in this order:

    1. the left window contains the version from the target branch
    2. the middle window contains the working copy of the file, complete with conflict markers
    3. the right window contains the version from the merge branch

The ‘target’ branch is the one that is active when you run git merge. Or in other words, it’s the HEAD branch. The ‘merge’ branch is the one that is named in the git merge command. In this scenario the ‘master’ branch is the target, and the ‘feature’ branch is merged into target, making it the merge branch.

**** Strategies for reconciling 3-way diffs

There are two basic strategies for reconciling a 3-way diff. You can either keep your cursor in the middle file, and run :diffget with the bufspec for the file containing the change you want to keep. Or you can position your cursor on the change that you want to keep, and run :diffput with the bufspec for the working copy file. We’ll take a look at each of these strategies in turn, starting with diffget.

Introducing buffspecs

In the context of a 2-way diff, the :diffget and :diffput commands are unambiguous. If you ask Vim to get the diff from the other window, there is only one place for it to look. When you do a 3-way merge, things get a little more complex. This time, it would be ambiguous if you were to tell Vim to fetch the changes from the other window. You have to specify which buffer to fetch the changes from by providing a [bufspec].The buffspec could either be the buffer number, or a partial match for the buffer’s name. Buffer numbers are assigned sequentially, so they will differ from session to session, but you can always be sure that they will uniquely identify their buffer.Fugitive follows a consistent naming convention when creating buffers for the target and merge versions of a conflicted file. The parent file from the target branch always includes the string //2, while the parent from the merge branch always contains //3. These partial matches are sufficient to uniquely identify the target and merge parents when using the :diffget command.

| parent version | buffspec |
| target         | //2      |
| merge          | //3      |

**** Resolving a 3-way diff with :diffget

The :diffget command modifies the current buffer by pulling a change over from one of the other buffers. In resolving a merge conflict, we want to treat target and merge parents as reference copies, pulling hunks of changes from those into the conflicted working copy. That means that we want to keep the middle buffer active, and run diffget with a reference to the buffer containing the change that we want to use.

#+BEGIN_EXAMPLE
:diffget //2 - fetches the hunk from the target parent (on the left)
:diffget //3 - fetches the hunk from the merge parent (on the right)
#+END_EXAMPLE

Note that Vim does not automatically recalculate the diff colors after you run :diffget. You can tell Vim to do this by running :diffupdate.

**** Resolving a 3-way diff with :diffput

The :diffput command modifies another buffer by pushing a change from the active buffer into it. In the context of a 3-way merge conflict, we want to push changes from the target and merge versions into the working copy.

The example in the video used a file called demo.js, which could be referenced using the buffspec ‘demo’. In this case, we could run the exact same command each time:

:diffput demo - pushes the hunk from the active buffer into the conflicted working copy

Although the command is kept constant, we have to activate the correct window before running it. Whereas using diffget, the window remained constant but we had to pass a different argument each time.

In a 2-way diff, the diffget and diffput commands require no argument. Vim provides a couple of convenient shorthand mappings for these commands: do performs a diffget, and dp does diffput. These mappings don’t normally work in a 3-way diff, because the diffget and diffput commands both require an argument in this context. But in the case of the diffput command, it’s pretty easy to guess what that argument is going to be.

When you do a 3-way diff between working copy, target and merge parents, fugitive assumes that if you run dp from either of the parent buffers, you want to put the change into the working copy. So even though the dp mapping normally only works in a 2-way diff, you can use it in this special case of a 3-way diff.

**** Keeping one parent version in its entirety

In reality, it’s often the case that one of the parent versions is to be kept wholesale, and the other version is to be discarded.
In this scenario, fugitive’s :Gwrite command comes in handy.
This overwrites the working tree and index copies with the contents of the currently active file.

If you run :Gwrite from the target or merge version of a file, fugitive raises a warning.
This is to protect you from accidentally overwriting the working copy and index files when you’ve carefully cherry picked the changes from the parent versions.
If you want to stage either of the parent versions in their entirety, use :Gwrite! to show you really mean it.

**** Useful commands

| command    | effect                                       |
| [c         | jump to previous hunk                        |
| ]c         | jump to next hunk                            |
| dp         | shorthand for `:diffput`                     |
| :only      | close all windows apart from the current one |
| :Gwrite[!] | write the current file to the index          |

The dp command normally only works in a two-way diff, as does do: the shorthand for diffget.To leave vimdiff mode, you just need to close the windows that are being compared. The quickest way to do this is to run :only from the window that you want to keep open.When you call :Gwrite from vimdiff mode, it writes the current file to the index and exits vimdiff mode.

**Show base in fugitive.vim conflict diff**

By default if you use fugitive.vim's :Gdiff on a file buffer which is in conflict with git, you will get a three way diff showing HEAD, the working copy (with conflict markers), and the merge.

I like to have git config merge.conflictstyle diff3 set, which includes the base (most recent common ancestor of HEAD and merge in the conflict markers.

Unfortunately even with diff3 as the conflictstyle in fugitive.vim you still only get 3 panes (no base).

Does anyone know how to make show it in another pane? Ideally about the working copy.

The quickest way I know of is this command, issued in the conflicted buffer:

#+BEGIN_EXAMPLE
:Gsdiff :1 | Gvdiff
#+END_EXAMPLE

You must enter these commands as a one-liner, the effect is different when you enter them as two separate commands.

The result looks like this:

+---------------------------------------+
|         common ancestor (:1)          |
+-----------+--------------+------------+
|           |              |            |
| HEAD (:2) | working copy | merge (:3) |
|           |              |            |
+-----------+--------------+------------+

The stuff inside the brackets are the 'revision' specifiers that fugitive.vim understands in this context.

See :h fugitive-revision for more information.

------------------------------------------
