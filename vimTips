------------------------------------------
Open question - vi/vim search and replace: how to replace all tabs with spaces
------------------------------------------
Open question - how to customize color scheme?
------------------------------------------
Open question - how to use vim's default file navigation mechanism? Is the answer in Leeran's youtube video?
------------------------------------------
WORD MANIPULATION:

Quickly change word or line : To quickly change a word you can use cw,caw (change a word) or ciw (change in word). Use c$ or just C to quickly change from the cursor to the end of a line, cc to change an entire line, or cis (change in sentense) for a sentence

To append something to a word (at the end of the word) - ea
Open question : How to change lower case letters words to upper case words? How to change upper case words to lower case words?
You can change the case of text:

    Toggle case "HellO" to "hELLo" with g~ then a movement (word or end of line). 
    Uppercase "HellO" to "HELLO" with gU then a movement (word or end of line). 
    Lowercase "HellO" to "hello" with gu then a movement (word or end of line). 

Alternatively, you can visually select text then press ~ to toggle case, or U to convert to uppercase, or u to convert to lowercase. 
-----------------------------------------
SEARCH AND REPLACE :

How do I convert all occurrences of ABC to XYZ in a file using the vi/vim editor?  :1,$s/ABC/XYZ/g   and then press [Enter]. This vi command replaces every occurrence of ABC with XYZ on every line, and even when there are multiple occurrences on a line.  Note that in this example, the "g" character at the end of the command means "global". If you don't use this "g" the tab character will only be replaced the first time it is seen on a line, but if you add the "g" at the end of the command every tab character in each line will be replaced.

:%s/search_for_this/replace_with_this/    - search whole file and replace
:%s/search_for_this/replace_with_this/c   - confirm each replace
To convert each tab in the file to four spaces : 1,$s/\t/    /g

General tips for searching : 

/pattern       - search forward for pattern
?pattern       - search backward
n              - repeat forward search
N              - repeat backward

:set ignorecase - case insensitive
:set smartcase  - use case if any caps used 
:set incsearch  - show match as search proceeds
:set hlsearch   - search highlighting

More cool searching tricks:
*               - search for word currently under cursor
g*              - search for partial word under cursor (repeat with n)
ctrl-o, ctrl-i  - go through jump locations
[I              - show lines with matching word under cursor
------------------------------------------
Removing duplicate rows in vi :sort u
------------------------------------------
LINE NUMBERS :
To display line numbers :set number (To turn off the line number display :set nonumber)

To enable line numbers on startup, simply add the following to your vimrc - set number
Relative Line Numbers : To display line numbers relative to the line with the cursor, :set relativenumber or :set norelativenumber
------------------------------------------
question : Delete all text before search pattern
I have a file that looks like below
1: #sometext
2: #sometext
3: #sometext
If want to delete the texts before the pattern ":" (colon). I have used the following command to replace every
:%s/^.*/\://
If want to delete the texts after the pattern ":" (colon). I have used the following command to replace every
:%s/\:.*$//
I would like to learn other ways to do. Thank you!.
------
Another answer : 
Do you want to not include the colon?
If so, then for deleting everything before (but not including) the colon:
:%s/.*\ze://
And for everything after:
:%s/:\zs.*//
See :help \zs and :help \ze for more info.

These atoms are amazing! After I discovered them, I started using them all the time. I remember them as z == zero-width (since they don't match anything).
------
If you want to delete all characters before "Hello", you can do
:%s/.*Hello/Hello/
Note that .* is greedy, i.e. it will eat all occurrences of "Hello" till it finds the last one. If you have a line:
abcHellodefHelloghi - it will become - Helloghi
If you want a non-greedy solution, try - :%s/.\{-}Hello/Hello
---------------------------------------------------------
CTAGS : 

To install ctags in centos:
1) Find the package you want to install
    $ yum list *ctags*
2) Install package
    $ yum install <packagename>

How to generate tags and use them for navigation in a big java project?
Go to the root folder of the project and execute this command : ctags -R

The next step is to get the full path of this tags file - in Linux, use the readlink utility to get the full path.
[n0281526@VDDP14P-4UCXMSH renters-api-sb2]$ readlink -f tags
/home/n0281526/Downloads/GitRepositories/renters-api-sb2/tags

open a file in the root folder of the project and run this command from within vim (use semi-colon and then type it)
set tags=./tags;/
(It starts with a tags file in the current directory and goes up to the root directory.)
-----------------------------------------------------------
SCROLLING : 

How to scroll up and down through a page gracefully?

The main scrolling commands in Vim are:
    Ctrl-B and Ctrl-F, as well as PageUp and PageDown scroll by full page
    Ctrl-U and Ctrl-D scroll half a page by default
    Ctrl-Y and Ctrl-E scroll one line
I lose visual context every time for the former two, so I have developed the bad habit of hitting the latter (Ctrl-Y and Ctrl-E) repetitively. 

Vim page up and page down keystrokes:
The Vim page up keystroke is [Control][b]. You can remember the 'b' by thinking "back".
The Vim page down keystroke is [Control][f]. You can remember the 'f' by thinking "forward".

You can use other keystrokes in Vim to move up and down, as shown here:
[Control][b] - Move back one full screen
[Control][f] - Move forward one full screen
[Control][d] - Move forward 1/2 screen
[Control][u] - Move back (up) 1/2 screen

    zz - move current line to the middle of the screen (Careful with zz, if you happen to have Caps Lock on accidentally, you will save and exit vim!)
    zt - move current line to the top of the screen
    zb - move current line to the bottom of the screen



Additionally:

    Ctrl-y Moves screen up one line
    Ctrl-e Moves screen down one line
    Ctrl-u Moves cursor & screen up ½ page
    Ctrl-d Moves cursor & screen down ½ page
    Ctrl-b Moves screen up one page, cursor to last line
    Ctrl-f Moves screen down one page, cursor to first line

Ctrl-y and Ctrl-e only change the cursor position if it would be moved off screen.


To leave the cursor in the same column when you use Ctrl+D, Ctrl+F, Ctrl+B, Ctrl+U, G, H, M, L, gg

you should define the following option:

:set nostartofline
-----------------------------------------------------------
TEXT SELECTION :

If you want to do the same thing to a collection of lines, like cut, copy, sort, or format, you first need to select the text. Get out of insert mode, hit one of the options below, and then move up or down a few lines. You should see the selected text highlighted.

V       - selects entire lines 
v       - selects range of text
ctrl-v  - selects columns
gv      - reselect block

After selecting the text, try d to delete, or y to copy, or :s/match/replace/, or :center, or !sort, or...

Here's one way to move selected text over a few spaces:

 - select a chunk of code using capital V and the arrow keys (or j, k)
 - type colon
 - then type s/^/   /
 - hit return

What you've done is replace the beginning of each selected line (the ^ symbol means "the beginning of the line") with spaces. 
-----------------------------------------------------------
https://vimhelp.org/
-----------------------------------------------------------
In Linux, the vimrc file is in /etc (if we want to edit it, we might have to do it as root)
-----------------------------------------------------------

