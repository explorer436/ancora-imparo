"In Linux, the system vimrc file is in /etc (if we want to change vim settings, it is a good idea to not mess with the system vimrc)
"(Do all the customizations to user vimrc which is located at /home/user/.vimrc)
"If it is not already available, create it manually.
"The plugins also go into the ".vim" directory located here : /home/user/.vim

"On Windows, when you start Vim normally, it *either* runs the file “C:\Documents and Settings\(user name)\_vimrc” (where “(user name)” is replaced by the actual user "name); *or*, if that file doesn’t exist (it usually doesn’t, for most users), it runs the file “C:\Program Files\vim\_vimrc”.

"For a clean start : 
"To remove the .vim directory, open terminal and run this : rm -rf ~/.vim
"To remove the .vimrc file, open terminal and run this : rm ~/.vimrc

"To create and edit our .vimrc, open terminal and run this : vim ~/.vimrc

"After making changes to the .vimrc file, if we want to make them effective immediately (called sourcing them), :source % (from within vim)
"After making changes to the list of plugins in the .vimrc file, if we want to make them effective immediately, :PlugInstall (from within vim)

"Look at the githut repo for the plugin manager "plug" for details about installing it : https://github.com/junegunn/vim-plug 


"(we can copy paste everything starting from the line below.)

"------------------------------

	" custom settings for the netrw file/directory menu...
	let g:netrw_liststyle = 3            " what does this do?
	let g:netrw_browse_split = 3            " what does this do?
	let g:netrw_banner = 0            " what does this do?
	let g:netrw_winsize = 25            " what does this do?
	let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'            " what does this do?
	
	" Set 'nocompatible' to ward off unexpected things that your distro might
	" have made, as well as sanely reset options when re-sourcing .vimrc
	set nocompatible
 
	" Attempt to determine the type of a file based on its name and possibly its
	" contents. Use this to allow intelligent auto-indenting for each filetype,
	" and for plugins that are filetype specific.
	filetype indent plugin on
 
	" Enable color syntax highlighting - wherever applicable
	syntax on
	
	" Vim with default settings does not allow easy switching between multiple files
	" in the same editor window. Users can use multiple split windows or multiple
	" tab pages to edit multiple files, but it is still best to enable an option to
	" allow easier switching between files.
	"
	" One such option is the 'hidden' option, which allows you to re-use the same
	" window and switch from an unsaved buffer without saving it first. Also allows
	" you to keep an undo history for multiple files when re-using the same window
	" in this way. Note that using persistent undo also lets you undo in multiple
	" files even in the same window, but is less efficient and is actually designed
	" for keeping undo history after closing Vim entirely. Vim will complain if you
	" try to quit without saving, and swap files will keep you safe if your computer
	" crashes.
	" Note that not everyone likes working this way (with the hidden option).
	" Alternatives include using tabs or split windows instead of re-using the same
	" window as mentioned above, and/or either of the following options:
	" set confirm
	" set autowriteall"
	set hidden	

	syntax on                   " basic highlighting for a lot of languages. If you want more highlighting for your language, you may have to download additional stuff.
	set bs=indent,eol,start         " allow backspacing over everything in insert mode
	set ai                 " always set autoindenting on
	"set backup             " keep a backup file
	set viminfo='20,\"50    " read/write a .viminfo file, don't store more than 50 lines of registers
	set history=50          " keep 50 lines of command line history
	set ruler               " show the cursor position all the time
	"set guicursor=           " what does this do?
	"set noshowmatch          " what does this do?
	set relativenumber        " shows relative line numbers
	set number               " shows line numbers - we are not going to use this because we are going to use relative line numbers.
	set hlsearch            " what does this do?
	set nohlsearch            " what does this do?
	set noerrorbells            " will not make error sounds when we go to the end of the line, etc.
	set tabstop=4 softtabstop=4            " tabstop means it is only 4 characters long. softtabstop means it is only 4 spaces long.
	set shiftwidth=4            " every time we hit tab, it shifts the characters by 4 spaces instead of 8.
	set expandtab            " convert it from tab character to spaces
	set smartindent            " vim tires its best to indent the code for us
	"set nowrap            " if the line goes off the screen, keep going to the right instead of showing it on the next line on the screen.
	set ignorecase            " what does this do?
	"set smartcase            " it ewill do case sensitive searching until we put in a capital letter.
	set noswapfile            " do not create vim.swap files all throughout the project.
	"set nobackup            " it will not create backup files. If you use this, make sure you also use the undodir and undofile.
	"set undodir=~/.vim/undodir            " what does this do?
	"set undofile            " what does this do?
	set incsearch            " turns on incremental search
	"set termguicolors            " what does this do?
	"set scrolloff=8            " what does this do?
	"set cmdheight=2            " Give more space for displaying messages. 
	"set updatetime=50            " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable delays and poor user experience.
	"set shortmess+=c            " Don't pass messages to |ins-completion-menu|.
	set colorcolumn=120            " shows a line at the 80 column of the page
	highlight ColorColumn ctermbg=0 guibg=lightgrey            " the color that needs to be used for the 80 column line	


"------------------------------

	"set spell               " to turn spell checking on
	"set spelllang=en_us  " to use US English  for spell checking

"------------------------------

set tags=./tags;/         " This will look in the current directory for "tags", and work up the tree towards root until one is found. In other words, you can be anywhere in your source tree instead of just the root of it.

" Before this, visit the github project for instructions about installing plugged : https://github.com/junegunn/vim-plug
" We need to run a command to Download plug.vim and put it in the "autoload" directory.
call plug#begin('~/.vim/plugged')

Plug 'ctrlpvim/ctrlp.vim'

call plug#end()
